###Algorithms for linked list

 ##Let input linked list is sorted in increasing order.
	1) If Linked list is empty then make the node as
   	head and return it.
	2) If the value of the node to be inserted is smaller 
   	than the value of the head node, then insert the node 
	at the start and make it head.
	3) In a loop, find the appropriate node after 
   	which the input node (let 9) is to be inserted. 
   	To find the appropriate node start from the head, 
   	keep moving until you reach a node GN (10 in
   	the below diagram) who's value is greater than 
   	the input node. The node just before GN is the
	appropriate node (7).
	4) Insert the node (9) after the appropriate node
   	(7) found in step 3.

  ##Deleting a node
	We explicitly handle the case when the node to be deleted is the first node,
	 we copy the data of the next node to head and delete the next node. 
	The cases when a deleted node is not the head node can be handled normally 
	by finding the previous node and changing next of the previous node. 

  ##Comparing two strings
	 Write a function compare() that works similar to strcmp(), i.e., it 
	returns 0 if both strings are same, 1 if first linked list is lexicographically 
	greater, and -1 if the second string is lexicographically greater.

  ##For n’th node from the end of a Linked List
	1) Calculate the length of Linked List. Let the length be len.
	2) Print the (len – n + 1)th node from the beginning of the Linked List.
	